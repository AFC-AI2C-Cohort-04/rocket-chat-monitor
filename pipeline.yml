# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  azureSubscriptionEndpoint: '4131058a-f1d5-4ad6-a56a-e40fe16303e5'
  acrResourceGroup: 'ai2c-cohort-04-rocket-chat-resource-group'
  acrRegistry: 'ai2ccohort04rcmregistry'
  imageRepository: 'rocketchatmonitor'
  dockerfilePath: '$(Build.SourcesDirectory)/elasticsearch/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  jobs:
  - job: "Build_Elasticsearch"
    displayName: "Build Elasticsearch"
    steps:
    - task: Docker@2
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Push
  jobs:
  - job: "Push_Elasticsearch"
    displayName: "Push Elasticsearch"
    steps:
    - task: Docker@2
      inputs:
        command: 'push'
        repository: $(acrRegistry)/$(imageRepository)
        tags: |
          $(tag)

- stage: Deploy
  jobs:
  - job: "Deploy_Elasticsearch"
    displayName: "Deploy Elasticsearch"
    steps:
    - script: |
        #!/bin/bash
        set -e
        cd TerraformFolder # Path to your Terraform configuration
        
        # Authenticate to Azure
        az login --service-principal -u $(servicePrincipalId) -p $(servicePrincipalKey) --tenant $(tenantId)
        az account set --subscription $(subscriptionId)

        # Initialize Terraform
        terraform init

        # Apply Terraform changes
        terraform apply -auto-approve
      displayName: Deploy
